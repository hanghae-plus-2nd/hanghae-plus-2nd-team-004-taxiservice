package hanghae.four.taxiservice.unit.infrastructures.pay

import hanghae.four.taxiservice.domain.pay.payinfo.Payment
import hanghae.four.taxiservice.domain.pay.payinfo.PaymentReader
import hanghae.four.taxiservice.infrastructures.util.fail
import java.util.concurrent.atomic.AtomicLong

class FakePaymentRepository : PaymentReader {
    private val autoGeneratedId: AtomicLong = AtomicLong(0)
    private val payments: ArrayList<Payment> = ArrayList()

    fun store(payment: Payment) {
        if (payment.id == null) {
            val savePayment = Payment(
                id = autoGeneratedId.incrementAndGet(),
                clientId = payment.clientId,
                type = payment.type
            )

            payments.add(savePayment)
            return
        }

        payments.removeIf { p -> p.id == payment.id }
        payments.add(payment)
    }

    override fun getPayment(paymentId: Long, type: Payment.Type): Payment {
        println(payments.firstOrNull { p -> p.id == paymentId && p.type == type })
        return payments.firstOrNull { p -> p.id == paymentId && p.type == type } ?: fail()
    }
}
