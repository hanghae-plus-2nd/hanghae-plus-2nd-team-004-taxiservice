package hanghae.four.taxiservice.unit.infrastructures.taxi

import hanghae.four.taxiservice.domain.taxi.Taxi
import hanghae.four.taxiservice.domain.taxi.TaxiReader
import hanghae.four.taxiservice.domain.taxi.TaxiStore
import hanghae.four.taxiservice.infrastructures.util.fail
import java.util.concurrent.atomic.AtomicLong

class FakeTaxiRepository : TaxiStore, TaxiReader {
    private val autoGeneratedId: AtomicLong = AtomicLong(0)
    private val taxis: ArrayList<Taxi> = ArrayList()

    override fun store(taxi: Taxi): Taxi {
        if (taxi.id == null) {
            val saveTaxi = Taxi(
                id = autoGeneratedId.incrementAndGet(),
                driverId = taxi.driverId,
                type = taxi.type,
                number = taxi.number,
                status = taxi.status
            )

            taxis.add(saveTaxi)
            return saveTaxi
        }

        taxis.removeIf { t -> t.id == taxi.id }
        taxis.add(taxi)
        return taxi
    }

    override fun existsBy(number: Int): Boolean {
        return taxis.any { it.number == number }
    }

    override fun findAllNotRunningTaxisByType(type: String): List<Taxi> {
        return taxis.filter { it.type.name == type && it.status != Taxi.Status.RUNNING }
    }

    override fun getTaxi(taxiId: Long): Taxi {
        return taxis.filter { it.id == taxiId }.firstOrNull() ?: fail()
    }
}
